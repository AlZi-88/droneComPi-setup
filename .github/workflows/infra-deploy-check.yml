name: Provision and Test Target Pi

on:
  push:
    branches:
      - main
      - infra/*
    paths-ignore:
      - 'docs/**'
      - 'README.md'
      - '.github/workflows/export-documentation.yml'
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy Target Pi via Ansible
    runs-on: [self-hosted, raspi, arm64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Validate TARGET_PI_IP secret
        run: |
          if [ -z "${{ secrets.COMPI_PI_IP }}" ]; then
            echo "Error: TARGET_PI_IP secret is not set."
            exit 1
          fi

      - name: Validate DRONE_USER_PASSWORD secret
        run: |
          if [ -z "${{ secrets.DRONE_USER_PASSWORD }}" ]; then
            echo "Error: DRONE_USER_PASSWORD secret is not set."
            exit 1
          fi

      - name: Run playbook to provision target
        working-directory: ansible
        run: |
          echo "${{ secrets.ANSIBLE_VAULT_PASSWORD }}" > vault_pass.txt
          ansible-playbook playbook.yml \
            --inventory inventory/compi.yaml \
            --vault-password-file vault_pass.txt \
            --extra-vars "compi_ip=${{ secrets.COMPI_PI_IP }} compi_password=${{ secrets.DRONE_USER_PASSWORD }} samba_password=${{ secrets.DRONE_USER_PASSWORD }} campi_ip=${{ secrets.CAMPI_PI_IP }} campi_password=${{ secrets.DRONE_USER_PASSWORD }}" \
        env:
          ANSIBLE_HOST_KEY_CHECKING: False

      - name: Remove vault password file
        run: rm -f ansible/vault_pass.txt

  test:
    name: Smoke Test ROS2 Interfaces
    runs-on: 
      - self-hosted
      - raspi
      - arm64
    needs: deploy

    steps:
      - name: Check PX4 Interfaces via SSH
        run: |
          ssh -o StrictHostKeyChecking=no drone@${{ secrets.COMPI_PI_IP }} << 'EOF'
          source /opt/ros/jazzy/setup.bash
          source /home/drone/ros2_drone_ws/install/setup.bash
          ros2 interface list | grep px4_msgs/msg/VehicleStatus
          EOF

      - name: Verify RecorderShare is mounted and accessible from Runner
        run: |
          echo "${{ secrets.DRONE_USER_PASSWORD }}" | sudo -S mkdir -p /mnt/recordershare
          # Check if the directory is already mounted
          if ! mountpoint -q /mnt/recordershare; then
            echo "${{ secrets.DRONE_USER_PASSWORD }}" | sudo -S mount -t cifs -o username=drone //${{ secrets.COMPI_PI_IP }}/RecorderShare /mnt/recordershare
          else
            echo "/mnt/recordershare is already mounted."
          fi
          testfile="/mnt/recordershare/github_testfile.txt"
          echo "Testing SMB share access" | sudo tee $testfile
          if [ -f "$testfile" ]; then
            echo "File written successfully"
            sudo rm $testfile
          else
            echo "Failed to write file to SMB share"
            exit 1
          fi
        shell: bash

  comm:
    name: Verify ROS2 Communication between the two Pis
    runs-on:
      - self-hosted
      - raspi
      - arm64
    needs: deploy
    steps:
        - name: Start ROS2 Talker on Compi
          run: |
            ssh -o StrictHostKeyChecking=no drone@${{ secrets.COMPI_PI_IP }} << 'EOF'
            source /opt/ros/jazzy/setup.bash
            export ROS_DOMAIN_ID=0
            ros2 run demo_nodes_cpp talker
            EOF
        - name: Verify ROS2 Communication
          run: |
            ssh -o StrictHostKeyChecking=no drone@${{ secrets.CAMPI_PI_IP }} << 'EOF'
            source /opt/ros/jazzy/setup.bash
            export ROS_DOMAIN_ID=0
            ros2 topic echo /chatter
            if [ $? -ne 0 ]; then
              echo "Failed to receive messages from /chatter topic"
              exit 1
            else
              echo "Successfully received messages from /chatter topic"
            fi
            EOF
        - name: Stop ROS2 Talker and Listener
          run: |
            ssh -o StrictHostKeyChecking=no drone@${{ secrets.COMPI_PI_IP }} << 'EOF'
            pkill -f talker
            EOF
            ssh -o StrictHostKeyChecking=no drone@${{ secrets.CAMPI_PI_IP }} << 'EOF'
            pkill -f listener
            EOF
